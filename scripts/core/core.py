#!/usr/bin/python
import java
import math
import sys

#################################
#*                             *#
#*   PYTHON SCRIPTING ENGINE   *#
#*   DO NOT DELETE THIS FILE!  *#
#*                             *#
#################################

"""
This is the core scripting file that is prepended to each script 
you compile. Do not edit this file, do not delete this file.
If you want to change the core-functions just redefine them in your
script. To use the events you *must* redefine them in your script
with the same type of arguments.
"""


# INITIATE GLOBAL VARIABLES
# ****************************************************************** #
# com is an essential global variable                                #
# it is what all commands are sent through at the end of each update #
# (think of it as a tunnel)                                          #
# you can reimplement main() to stop it from setting com="" on start #


coreVersion = "0.1"			# the version of this core
com = ''					# the command pipeline
debugMode = ''				# makes scriptengine spit io
requestMouseKeyboard = ''	# makes game call setMouse() and setKey()
mouseX = 0				    # (int)between 0, appwidth(800)
mouseY = 0				    # (int)between 0, appheight(600)
mousePressed = ['', '', '']	# (Boolean)left, right, center
keyPressed = ''			    # (String)last key pressed
#serverVersion = "0.1"      # (String) needs to be set by server at some point
gameType = 0				# set to gametype(solo, dm, tm, cp, koth, ctf, etc..)
gamePaused = 'false'
enginePoint = 0				# set to engine object of game for lookups


# CORE GAME FUNCTIONS
# ****************************************************************** #
# update() is called every game loop from main, this is the roots of #
# your code, make sure to redefine it in your own script.            #
# use return of 0 to return to game and execute com                  #
# (return of zero clears com)                                        #
# use a return of 1 to execute update again--                        #
# (game will execute com commands again, if you want them reset do   # 
# it manually by calling reset()                                     #
def update(): pass

# reset is called once update is finished running from game, com     #
# persist until you reset it if return 1 is used                     #
def reset():
	global com
	global toWorld
	global toScreen
	com = ''
	toWorld.dcom = ''
	toScreen.dcom = ''

# called from game when requestMouseKeyboard is set to true
def setMouse(x, y, m):
	global mouseX
	global mouseY
	global mousePressed
	mouseX = x
	mouseY = y
	mousePressed = m[0], m[1], m[2]

def setKey(k):
	global keyPressed
	keyPressed = k
	
	
def getGameType():
	return gameType
	
def getGamePaused():
	return gamePaused
	
def getScreenDraw():
    return toScreen.dcom

def getWorldDraw():
    return toWorld.dcom


# distance formula utilizing the sphyrical law of cosines
# from http://cyberpython.wordpress.com/2010/03/31/python-calculate-the-distance-between-2-points-given-their-coordinates/
def dist(x1, y1, x2, y2):
	if((x1 == x2) and (y1 == y2)):
		return 0
	delta = y2 - y1
	a = math.radians(x1)
	b = math.radians(x2)
	C = math.radians(delta)
	x = math.sin(a) * math.sin(b) + math.cos(a) * math.cos(b) * math.cos(C)
	distance = math.acos(x) # in radians
	distance  = math.degrees(distance) # in degrees
	distance  = distance * 60 # 60 nautical miles / lat degree
	distance = distance * 1852 # conversion to meters
	distance  = round(distance)
	return distance;

# constrains a number between two points
def constrain(n, min, max):
	if n < min:
		return min
	elif n > max:
		return max
	return n	
	